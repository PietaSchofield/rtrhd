% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_table_with_schema.R
\name{gold_import}
\alias{gold_import}
\title{Import GOLD tab-delimited files into DuckDB using XML schema}
\usage{
gold_import(
  root_dir,
  con,
  txt_glob = "*.txt",
  xml_glob = "*.xml",
  has_header = TRUE
)
}
\arguments{
\item{root_dir}{Character scalar. Path to the root directory containing
subdirectories with XML + TXT files, or containing files itself.}

\item{con}{A live DBIConnection to a DuckDB database.}

\item{txt_glob}{Pattern for tab-delimited files. Default \code{"*.txt"}.}

\item{xml_glob}{Pattern for XML schema files. Default \code{"*.xml"}.}

\item{has_header}{Logical. If \code{TRUE}, the TXT files are assumed to
contain a header row. Default \code{FALSE}.}
}
\value{
Invisibly returns a named integer vector: the number of TXT files
successfully loaded into each table.
}
\description{
For each subdirectory under \code{root_dir}, this function looks for one XML schema
file (describing the columns) and one or more tab-delimited \code{.txt} files
(containing the data). It creates a DuckDB table named after the subdirectory
(lowercased) if it does not exist and appends rows from all \code{.txt} files.
}
\details{
If \code{root_dir} itself contains XML/TXT files (no subdirectories), a single
table is created using the lowercased basename of \code{root_dir}.

All columns are created as \code{VARCHAR} to avoid premature type coercion.
Any lookup information in the XML is ignored at import time and can be
handled later during analysis.
}
\examples{
\dontrun{
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "gold.duckdb")
loaded <- gold_import(
  root_dir   = "/path/to/root/with/subdirs",
  con        = con,
  txt_glob   = "*.txt",
  xml_glob   = "*.xml",
  has_header = FALSE
)
loaded
}

}
